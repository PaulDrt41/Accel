import pygame
import numpy
import math

import matplotlib.pyplot as plt

pygame.init()

WIDTH, HEIGHT = 800, 800
WIN = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Orbit simulation")

WHITE = (255, 255, 255)
YELLOW = (255, 255, 0)
GREEN = (0, 255, 0)
GREY = (192, 192, 192)
TEAL = (0, 128, 128)
CRIMSON = (220, 20, 60)
CYAN = (0, 255, 255)

top = 0
englist = []
ctlist = []
coolerenglist = []
recenglist = []
eclend = 0

def dist(point1, point2):
    xa, ya, za = point1
    xb, yb, zb = point2
    x = xb - xa
    y = yb - ya
    z = zb - za
    di = math.sqrt(x**2 + y**2 + z**2)
    return di

class Body:
    AU = 149.6e9
    ER =  6371000
    LEO = 2000000 + ER
    G = 6.67428e-11
    R_SUN = 696000000
    R_EARTH = 6371000
    SCALE = 250 / LEO
    TIMESTEP = 7
    SUN_LUM = 3.846e26
    EARTH_IRR = 240
    HOT_TIME = 0
    COLD_TIME = 0
    ECL_ANGLE = math.asin((R_SUN - R_EARTH)/AU)
    rho = 9.09e-17

    def __init__(self, x, y, z, radius, color, mass, real_rad):
        self.x = x
        self.y = y
        self.z = z
        self.radius = radius
        self.color = color
        self.mass = mass
        self.real_rad = real_rad

        self.orbit = []
        self.earth = False
        self.distance_to_earth = 0

        self.x_vel = 0
        self.y_vel = 0
        self.z_vel = 0
        if self.earth == False:
            self.apo = (0, 0, 0)
            self.per = (1e10, 1e10, 1e10)

            self.anode = (0, 0, 0)
            self.dnode = (0, 0 ,0)
            self.z_ant = 0
            self.per_ant = 0
            self.per_selected = True
            self.apo_selected = True
            self.anode_selected = False

            self.a = 0
            self.inc = 0
            self.ecc = 0
            self.arg = 0
            self.albedo = 0.1
            self.area = 30 * 280 + 14 * 50

            self.invol = 15 * math.pi * (140**2 - 125.8**2)
            self.airmass = self.invol * self.rho
            self.intemp = 0

            self.eng_cool = 2 * self.airmass * 1005 * (125-92) / 0.3
            self.eng_cool1 = self.eng_cool * 0.3
            self.cooler_pow = 7715170.329750674

            self.panel_eff  = 0.257
            self.sun_eng = 0
            
            

    
    def toScale(self, point):
        x, y, z = point
        xn = x * self.SCALE + WIDTH/2
        yn = -y * self.SCALE + HEIGHT/2
        zn = -z * self.SCALE + HEIGHT/2
        return xn, yn, zn

    def elements(self, earth):
        apg = dist(self.apo, (earth.x, earth.y, earth.z))
        prg = dist(self.per, (earth.x, earth.y, earth.z))

        self.a = (apg + prg) / 2
        self.ecc = (apg - self.a) / self.a
        if self.per_selected == True and self.anode_selected == True:
            d1, d2, d3 = dist(self.anode, (self.per)), dist((self.per), (earth.x, earth.y, earth.z)), dist((earth.x, earth.y, earth.z), self.anode)
            cos_arg = (d2**2 + d3**2 - d1**2)/(2*d2*d3)
            self.arg = math.acos(cos_arg)



    def draw(self, win):
        global top
        x = self.x * self.SCALE + WIDTH/2
        y = -self.y * self.SCALE + HEIGHT/2
        z = -self.z * self.SCALE + HEIGHT/2
        if len(self.orbit) > 2:
            updated_points = []
            for var in self.orbit:
                x0, y0, z0 = self.toScale(var)    
                if top == 1:
                    updated_points.append((x0, z0))
                elif top == 0:
                    updated_points.append((x0, y0))

            pygame.draw.lines(win, self.color, False, updated_points, 4)
            if top == 0:
                pygame.draw.circle(win, self.color, (x, y), self.radius)
            elif top == 1:
                pygame.draw.circle(win, self.color, (x, z), self.radius)
        
    def drawElements(self, win, earth):
        self.elements(earth)
        global top
        ax, ay, az = self.toScale(self.apo)
        px, py, pz = self.toScale(self.per)


        x = earth.x*self.SCALE + WIDTH/2
        y = -earth.z*self.SCALE + HEIGHT/2
        z = -earth.z*self.SCALE + HEIGHT/2

        x_anode, y_anode, z_anode = self.toScale(self.anode)
        x_dnode, y_dnode, z_dnode = self.toScale(self.dnode)


        if top == 0:
            pygame.draw.line(win, TEAL, (x, y), (ax, ay) ,4)
            pygame.draw.line(win, CRIMSON, (x, y), (px, py), 4)
            pygame.draw.line(win, CYAN, (x_anode, y_anode), (x_dnode, y_dnode),4)
        elif top == 1:
            pygame.draw.line(win, TEAL, (x, z) , (ax, az), 4)
            pygame.draw.line(win, CRIMSON, (x, z), (px, pz), 4)
            pygame.draw.line(win, CYAN, (x_anode, z_anode), (x_dnode, z_dnode), 4)   
    
    def attraction(self, other):
        other_x, other_y, other_z = other.x, other.y, other.z
        distance_x = other_x - self.x
        distance_y = other_y - self.y
        distance_z = other_z - self.z
        distance = math.sqrt(distance_x**2 + distance_y**2 + distance_z**2)

        if  other.earth:
            self.distance_to_earth = distance

        force = self.G * self.mass * other.mass / distance**2
        theta = math.atan2(distance_y, distance_x)
        distance_a = math.sqrt(distance_x**2 + distance_y**2)
        psi = math.atan2(distance_z, distance_a)

        force_x = math.cos(psi) * math.cos(theta) * force
        force_y = math.cos(psi) * math.sin(theta) * force
        force_z = math.sin(psi) * force
        return force_x, force_y, force_z
    
    def drag(self):
        t_kelv = 273.1 -131.21 + self.distance_to_earth*0.00299
        pressure = 2.488 * (t_kelv/216.6)**(-11.388)
        rho = pressure/(0.2869 * t_kelv)

        self.airmass = self.invol * rho 
        vel = math.sqrt(self.x_vel**2 + self.y_vel**2 + self.z_vel**2)
        area = math.pi * self.real_rad**2
        drag = -0.5 * 0.5 * area * (vel**2) * rho

        psi = math.asin(self.z_vel/vel)
        theta = math.atan2(self.y_vel, self.x_vel)

        drag_plane = drag * math.cos(psi)
        drag_z = drag* math.sin(psi)
        drag_y = drag_plane * math.sin(theta)
        drag_x = drag_plane * math.cos(theta)

        return drag_x, drag_y, drag_z
    def heating(self):
        global eclend, coolerenglist
        de = self.AU * self.R_EARTH/(self.R_SUN- self.R_EARTH)
        #print(de)
        if self.x <= de and self.x >=0 and abs(self.y) <= (de-self.x)* math.tan(self.ECL_ANGLE):
            self.COLD_TIME =self.COLD_TIME + self.TIMESTEP
            pow = self.area* (1-self.albedo) *  self.EARTH_IRR * (self.R_EARTH**2) / (dist((0, 0, 0), (self.x, self.y, self.z))**2)
            self.eng_cool1 = self.eng_cool1 +  2 * pow * self.TIMESTEP
            self.eng_cool = self.eng_cool + 2 * self.cooler_pow * self.TIMESTEP 
            coolerenglist.append(self.eng_cool)

            print(self.eng_cool1)
            englist.append(self.eng_cool1)
            ctlist.append(self.COLD_TIME)
            #print(ctlist)
        else:
            eclend = eclend + 1
            LUM = self.SUN_LUM * (1 - self.albedo) * (self.area - 14 * 50)/ (4 * math.pi * (self.AU + self.x)**2)
            self.HOT_TIME = self.HOT_TIME + self.TIMESTEP
            #print("lum: " , LUM)
            self.sun_eng = self.sun_eng + LUM * self.TIMESTEP * self.panel_eff
            recenglist.append(self.sun_eng)
    def update_position(self, bodies):
        total_fx = total_fy = total_fz = 0
        for body in bodies:
            if self == body:
                continue
            fx, fy, fz = self.attraction(body)
            total_fx += fx
            total_fy += fy
            total_fz += fz
            if self.earth == False:
                drx, dry, drz = self.drag() #applying drag!!
                total_fx+= drx
                total_fy+= dry
                total_fz+= drz
        self.x_vel += total_fx / self.mass * self.TIMESTEP
        self.y_vel += total_fy / self.mass * self.TIMESTEP
        self.z_vel += total_fz / self.mass * self.TIMESTEP

        self.x += self.x_vel * self.TIMESTEP
        self.y += self.y_vel * self.TIMESTEP
        self.z += self.z_vel * self.TIMESTEP 
        self.orbit.append((self.x, self.y, self.z))

timestamp = 0
incr = 0
ecclist = []
dvlist = []
timestamps = []

def main():
    global top, incr, ecclist, dvlist, timestamp
    run = True
    clock = pygame.time.Clock()

    earth = Body(0, 0, 0, 50, GREEN, 5.7e24, Body.ER)
    earth.earth = True

    asteroid = Body(-1 * Body.LEO, 0,0, 10 , GREY, 6000 , 500)
    asteroid.y_vel = 6753 + incr 
    bodies = [earth, asteroid]
    #top = int(input("0 for side, 1 for top "))
    print(Body.ECL_ANGLE * 180/ math.pi)
    while run:
        clock.tick(60)
        WIN.fill(WHITE)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
        for body in bodies:
            if body.ecc >= 0.7:
                run = False
            body.z_ant = body.z
            body.per_ant = dist(body.per, (earth.x, earth.y, earth.z))
            body.update_position(bodies)
            timestamp = timestamp + 60 * body.TIMESTEP
            if body.earth == False:
                body.heating()
                if body.distance_to_earth > dist(body.apo, (earth.x, earth.y, earth.z)):
                    body.apo_selected = False
                    body.apo = (body.x, body.y, body.z)
                elif body.distance_to_earth < dist(body.apo, (earth.x, earth.y, earth.z)):
                    body.apo_selected= True
                if body.distance_to_earth < dist(body.per, (earth.x, earth.y, earth.z)):
                    body.per_selected = False
                    body.per = (body.x, body.y, body.z)
                elif body.distance_to_earth > dist(body.per, (earth.x, earth.y, earth.z)):
                    body.per_selected = True

                body.drawElements(WIN, earth)
                if body.z_ant * body.z <= 0 and body.z_ant < 0:
                    body.anode = (body.x, body.y, body.z)
                    body.anode_selected = True
                elif body.z_ant * body.z <= 0 and body.z_ant > 0:
                    body.dnode = (body.x, body.y, body.z)
                    body.anode_selected = False
                #if body.apo_selected == True and body.per_selected == True and dist(body.apo ,body.per) > body.a:
                    #ecclist.append(body.ecc)
                    #dvlist.append(incr)
                    #incr = incr+25
                    #timestamps.append(timestamp)
                    #print(ecclist)
                    #print(dvlist)
                    
            body.draw(WIN)

        pygame.display.update()
    e1 = 4830468143.456897
    e0 = 15826384.240586683

    print("coolerpow: ", (e1)/((asteroid.COLD_TIME - 62))/0.3)
    
    
    intensity = 1000
    
    acclist1 = [32.2481189839015, 32.89350878728641, 33.540137030499146, 34.18366032164061, 34.82829647858317, 35.47614343352399, 36.11799142243961, 36.76588943093503, 37.41149200250363, 38.05295480929604, 38.69770605941408, 39.34411242514489, 39.988802778511506, 40.63273235239119, 41.2808545280004, 41.92856295429003, 42.56870359222824, 43.216828387468034, 43.859697093339285, 44.5045600763556, 45.14986618627606, 45.79221747288718, 46.4420848302064, 47.08234359295479, 47.71997967619912, 48.3772660734024]
    ilist1 = [1000, 1020, 1040, 1060, 1080, 1100, 1120, 1140, 1160, 1180, 1200, 1220, 1240, 1260, 1280, 1300, 1320, 1340, 1360, 1380, 1400, 1420, 1440, 1460, 1480, 1500]

    plist = []

    for intens in ilist1:
        plist.append(2 *((2 * math.pi * 125.8 * 0.12276)**2) * intens + asteroid.cooler_pow)

    receng = asteroid.sun_eng
    print("englisst:", englist)
    print("cooelr: ", coolerenglist)
    print("receng: ", receng)
    pygame.quit()

#main()

dvlist = [0, 25, 50, 75, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 425, 450, 475, 500, 525, 550, 575, 600, 625, 650, 675, 700, 725, 750, 775, 800, 825, 850, 875, 900, 925, 950, 975, 1000, 1025, 1050, 1075, 1100, 1125, 1150, 1175, 1200, 1225, 1250, 1275, 1300, 1325, 1350, 1375, 1400, 1425, 1450, 1475, 1500, 1525, 1550, 1575, 1600, 1625, 1650, 1675, 1700, 1725, 1750, 1775, 1800, 1825, 1850, 1875, 1900, 1925, 1950, 1975, 2000, 2025]
ecclist = [0.0044566334755045825, 0.011254091161685954, 0.01858107538069753, 0.02601754164583963, 0.033508845627631414, 0.0410395993215805, 0.0486058036532956, 0.056202624542801276, 0.06382953680845038, 0.07148716624716277, 0.07917229319559202, 0.08688531685775196, 0.09462815041868569, 0.10239864347177, 0.11019648222287931, 0.11802217338062418, 0.12587541288658877, 0.1337557698848674, 0.1416647510536813, 0.14960340602284303, 0.1575679789269459, 0.16556040584683618, 0.17357968254517034, 0.18162775162381492, 0.18970190416932925, 0.1978051630464793, 0.20593466562379298, 0.214092331649774, 0.22227762897075104, 0.2304895215595021, 0.23873030100492287, 0.24699791517901493, 0.25529274396539586, 0.2636157145311236, 0.271965503204781, 0.2803429218787447, 0.28874834504507213, 0.2971815465226431, 0.30564142736175315, 0.31412915420602017, 0.32264482963893726, 0.33118782110858486, 0.3397631027026312, 0.3483615801466216, 0.3569872482862814, 
0.36564065960075104, 0.3743215957566877, 0.3830299806201872, 0.3917656871154426, 0.40052901381999667, 0.40932015712027964, 0.4181385680788858, 0.4269842940810532, 0.4358578565795065, 0.44475873205845146, 0.45368731686303526, 0.4626430843382386, 0.47162662632242836, 
0.48063758752656166, 0.4896760004782783, 0.49874220168712274, 0.5078357153845064, 0.5169567272084583, 0.5261052456838143, 0.5352811978254125, 0.5444846602976701, 0.5537158040070048, 0.5629743204581272, 0.5722604786447165, 0.5815739687078306, 0.5909151236672604, 0.6002836688172309, 0.60967977485946, 0.6191034041213307, 0.6285545120542387, 0.6380330926327904, 0.6475392374281811, 0.6570728642096819, 0.6666340217816309, 0.6762226521053574, 0.6858388110245311, 0.6954825176943648]

plist = [20244591.50799691, 20621204.04213096, 20997816.576265007, 21374429.110399056, 21751041.64453311, 22127654.178667158, 22504266.712801207, 22880879.246935256, 23257491.781069305, 23634104.315203354, 24010716.849337403, 24387329.383471455, 24763941.917605504, 25140554.451739553, 25517166.985873602, 25893779.52000765, 26270392.0541417, 26647004.58827575, 27023617.122409802, 27400229.65654385, 27776842.1906779, 28153454.72481195, 28530067.258945998, 28906679.793080047, 29283292.327214096, 29659904.86134815]
acclist1 = [32.2481189839015, 32.89350878728641, 33.540137030499146, 34.18366032164061, 34.82829647858317, 35.47614343352399, 36.11799142243961, 36.76588943093503, 37.41149200250363, 38.05295480929604, 38.69770605941408, 39.34411242514489, 39.988802778511506, 40.63273235239119, 41.2808545280004, 41.92856295429003, 42.56870359222824, 43.216828387468034, 43.859697093339285, 44.5045600763556, 45.14986618627606, 45.79221747288718, 46.4420848302064, 47.08234359295479, 47.71997967619912, 48.3772660734024]

ctlist = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105, 112, 119, 126, 133, 140, 147, 154, 161, 168, 175, 182, 189, 196, 203, 210, 217, 224, 231, 238, 245, 252, 259, 266, 273, 280, 287, 294, 301, 308, 315, 322, 329, 336, 343, 350, 357, 364, 371, 378, 385, 392, 
399, 406, 413, 420, 427, 434, 441, 448, 455, 462, 469, 476, 483, 490, 497, 504, 511, 518, 525, 532, 539, 546, 553, 560, 567, 574, 581, 588, 595, 602, 609, 616, 623, 630, 637, 644, 651, 658, 665, 672, 679, 686, 693, 700, 707, 714, 721, 728, 735, 742, 749, 756, 763, 770, 777, 784, 791, 798, 805, 812, 819, 826, 833, 840, 847, 854, 861, 868, 875, 882, 889, 896, 903, 910, 917, 924, 931, 938, 945, 952, 959, 966, 973, 980, 987, 994, 1001, 1008, 1015, 1022, 1029, 1036, 1043, 1050, 1057, 1064, 1071, 1078, 1085, 1092, 1099, 1106, 1113, 
1120, 1127, 1134, 1141, 1148, 1155, 1162, 1169, 1176, 1183, 1190, 1197, 1204, 1211, 1218, 1225, 1232, 1239, 1246, 1253, 1260, 1267, 1274, 1281, 1288, 1295, 1302, 1309, 1316, 1323, 1330, 1337, 1344, 1351, 1358, 1365, 1372, 1379, 1386, 1393, 1400, 1407, 1414, 1421, 1428, 1435, 1442, 1449, 1456, 1463, 1470, 1477, 1484, 1491, 1498, 1505, 1512, 1519, 1526, 1533, 1540, 1547, 1554, 1561, 1568, 1575, 1582, 1589, 1596, 1603, 1610, 1617, 1624, 1631, 1638, 1645, 1652, 1659, 1666, 1673, 1680, 1687, 1694, 1701, 1708, 1715, 1722, 1729, 1736, 1743, 1750, 1757, 1764, 1771, 1778, 1785, 1792, 1799, 1806, 1813, 1820, 1827, 1834, 1841, 1848, 1855, 1862, 1869, 1876, 1883, 1890, 1897, 1904, 1911, 1918, 1925, 1932, 1939, 1946, 1953, 1960, 1967, 1974, 1981, 1988, 1995, 2002, 2009, 2016, 2023, 2030, 2037, 2044, 
2051, 2058, 2065, 2072, 2079, 2086, 2093, 2100, 2107, 2114, 2121, 2128, 2135, 2142, 2149]
#englist= [19965592.426586483, 39930187.45563035, 59893785.35512555, 79856386.42434165, 99817990.99380437, 119778599.42527337, 139738212.11171937, 159696829.4773, 179654451.97733486, 199611080.09827965, 219566714.35769928, 239521355.3042399, 259475003.51760036, 279427659.60850215, 299379324.21865904, 319329998.0207452, 339279681.7183628, 359228376.0460084, 379176081.76903844, 399122799.683634, 419068530.6167644, 439013275.4261501, 458957035.0002241, 478899810.25809354, 498841602.14949894, 518782411.6547738, 538722239.7848024, 558661087.5809774, 578598956.1151558, 598535846.4896145, 618471759.8370048, 638406697.320306, 658340660.1327779, 678273649.4979132, 698205666.6693878, 718136712.9310111, 738066789.5966748, 757995898.0103017, 777924039.5457927, 797851215.6069733, 817777427.6275392, 837702677.071001, 857626965.4306284, 877550294.2293926, 897472665.019909, 917394079.3843781, 937314538.9345257, 957234045.3115433, 977152600.1860259, 997070205.25791, 1016986862.2564112, 1036902572.9399596, 1056817339.0961356, 1076731162.541604, 1096644045.1220481, 1116555988.712102, 1136466995.215283, 1156377066.5639224, 1176286204.7190962, 1196194411.6705542, 1216101689.436649, 1236008040.0642643, 1255913465.6287408, 1275817968.2338033, 1295721550.0114863, 1315624213.1220582, 1335525959.7539456, 1355426792.123656, 1375326712.4757004, 1395225723.0825143, 1415123826.2443795, 1435021024.289343, 1454917319.5731366, 1474812714.4790952, 1494707211.4180746, 1514600812.8283684, 1534493521.1756237, 1554385338.9527571, 1574276268.679869, 1594166312.904157, 1614055474.1998296, 1633943755.1680186, 1653831158.4366906, 1673717686.6605575, 1693603342.5209873, 1713488128.7259128, 1733372048.0097408, 1753255103.1332603, 1773137296.8835492, 1793018632.073881, 1812899111.5436308, 1832778738.1581805, 1852657514.8088229, 1872535444.4126656, 1892412529.9125342, 1912288774.276874, 1932164180.4996529, 1952038751.6002605, 1971912490.6234102, 1991785400.639038, 2011657484.7422013, 2031528746.052977, 2051399187.7163599, 2071268812.9021587, 2091137624.804893, 2111005626.6436884, 2130872821.6621718, 2150739213.128365, 2170604804.33458, 2190469598.5973096, 2210333599.257122, 2230196809.678551, 2250059233.2499886, 2269920873.3835735, 2289781733.5150833, 2309641817.1038218, 2329501127.6325083, 2349359668.6071663, 2369217443.55701, 2389074456.034332, 2408930709.6143875, 2428786207.8952827, 2448640954.497858, 2468494953.065573, 2488348207.264391, 2508200720.7826595, 2528052497.330997, 2547903540.6421723, 2567753854.4709864, 2587603442.5941544, 2607452308.810185, 2627300456.9392614, 2647147890.823119, 2666994614.3249264, 2686840631.329161, 2706685945.741489, 2726530561.488641, 2746374482.5182886, 2766217712.7989225, 2786060256.3197255, 2805902117.0904484, 2825743299.141285, 2845583806.522745, 2865423643.3055296, 2885262813.5804014, 2905101321.45806, 2924939171.0690103, 2944776366.5634384, 2964612912.1110787, 2984448811.9010863, 3004284070.1419067, 3024118691.061145, 3043952678.905435, 3063786037.940308, 3083618772.450061, 3103450886.737623, 3123282385.124425, 3143113271.9502625, 3162943551.5731664, 3182773228.369265, 3202602306.7326517, 3222430791.0752482, 3242258685.8266706, 3262085995.4340925, 3281912724.362108, 3301738877.092597, 3321564458.1245847, 3341389471.974107, 3361213923.1740704, 3381037816.274115, 3400861155.840474, 3420683946.4558363, 3440506192.7192044, 3460327899.245756, 3480149070.666703, 3499969711.6291513, 3519789826.795958, 3539609420.8455906, 3559428498.471985, 3579247064.384403, 3599065123.30729, 3618882679.9801307, 3638699739.157306, 3658516305.60795, 3678332384.1158047, 3698147979.4790754, 3717963096.510287, 3737777740.0361366, 3757591914.897351, 3777405625.948537, 3797218878.058038, 3817031676.1077867, 3836844024.9931564, 3856655929.6228166, 3876467394.9185834, 3896278425.8152723, 3916089027.2605495, 3935899204.214784, 3955708961.650899, 3975518304.5542216, 3995327237.922335, 4015135766.7649274, 4034943896.1036425, 4054751630.971929, 4074558976.4148917, 
#4094365937.4891376, 4114172519.262628, 4133978726.814525, 4153784565.2350407, 4173590039.6252847, 4193395155.097113, 4213199916.7729754, 4233004329.785762, 4252808399.2786503, 4272612130.4049535, 4292415528.3279657, 4312218598.220809, 4332021345.26628, 4351823774.656694, 4371625891.593734, 4391427701.288291, 4411229208.960315, 4431030419.838656, 4450831339.160913, 4470631972.173274, 4490432324.130362, 4510232400.295079, 4530032205.938455, 4549831746.339483, 4569631026.784971, 4589430052.56938, 4609228828.994669, 4629027361.370139, 4648825655.012277, 4668623715.244594, 4688421547.397473, 4708219156.808011, 4728016548.819857, 4747813728.783057, 4767610702.053899, 4787407473.994748, 4807204049.973895, 4827000435.365393, 4846796635.548902, 4866592655.909529, 4886388501.837669, 4906184178.728848, 4925979691.9835615, 4945775047.007115, 4965570249.20947, 4985365304.005076, 5005160216.81272, 5024954993.055361, 5044749638.159972, 5064544157.557383, 5084338556.682115, 5104132840.972225, 5123927015.869148, 5143721086.81753, 5163515059.265073, 5183308938.662374, 5203102730.462763, 5222896440.122145, 5242690073.098837, 5262483634.853411, 5282277130.84853, 5302070566.548789, 5321863947.420556, 5341657278.9318075, 5361450566.551972, 5381243815.751766, 5401037032.003036, 5420830220.778594, 5440623387.552063, 5460416537.7977085, 5480209676.990283, 5500002810.604864, 5519795944.1166935, 5539589083.001014, 5559382232.732912, 5579175398.787156, 5598968586.638035, 5618761801.759195, 5638555049.623484, 5658348335.7027855, 5678141665.467863, 5697935044.388196, 5717728477.931818, 5737521971.565161, 5757315530.752888, 5777109160.957739, 5796902867.640366, 5816696656.259174, 5836490532.270163, 5856284501.12676, 5876078568.279669, 5895872739.1767025, 5915667019.262627, 5935461413.978996, 5955255928.764, 5975050569.052295, 5994845340.274851, 6014640247.85879, 6034435297.227225, 6054230493.799101, 6074025842.989035, 6093821350.207157]
#coolerenglist = [136261777.516217, 272523555.0324288, 408785332.5486406, 545047110.0648525, 681308887.5810642, 817570665.097276, 953832442.6134877, 1090094220.1296995, 1226355997.6459112, 1362617775.162123, 1498879552.6783347, 1635141330.1945465, 1771403107.7107582, 1907664885.22697, 2043926662.7431817, 2180188440.2593937, 2316450217.7756057, 2452711995.2918177, 2588973772.8080297, 2725235550.3242416, 2861497327.8404536, 2997759105.3566656, 3134020882.8728776, 3270282660.3890896, 3406544437.9053016, 3542806215.4215136, 3679067992.9377255, 3815329770.4539375, 3951591547.9701495, 4087853325.4863615, 4224115103.0025735, 4360376880.518785, 4496638658.034997, 4632900435.5512085, 4769162213.06742, 4905423990.5836315, 5041685768.099843, 5177947545.616055, 5314209323.132266, 5450471100.648478, 5586732878.164689, 5722994655.680901, 5859256433.197112, 5995518210.713324, 6131779988.229535, 6268041765.745747, 6404303543.261958, 6540565320.77817, 6676827098.294381, 6813088875.810593, 6949350653.326804, 7085612430.843016, 7221874208.359227, 7358135985.875439, 7494397763.39165, 
##7630659540.907862, 7766921318.424073, 7903183095.940285, 8039444873.456496, 8175706650.972708, 8311968428.488919, 8448230206.005131, 
#8584491983.521342, 8720753761.037554, 8857015538.553766, 8993277316.069979, 9129539093.586191, 9265800871.102404, 9402062648.618616, 
#9538324426.134829, 9674586203.651041, 9810847981.167253, 9947109758.683466, 10083371536.199678, 10219633313.71589, 10355895091.232103, 10492156868.748316, 10628418646.264528, 10764680423.78074, 10900942201.296953, 11037203978.813166, 11173465756.329378, 11309727533.84559, 11445989311.361803, 11582251088.878016, 11718512866.394228, 11854774643.91044, 11991036421.426653, 12127298198.942865, 12263559976.459078, 12399821753.97529, 12536083531.491503, 12672345309.007715, 12808607086.523928, 12944868864.04014, 13081130641.556353, 13217392419.072565, 13353654196.588778, 13489915974.10499, 13626177751.621202, 13762439529.137415, 13898701306.653627, 14034963084.16984, 14171224861.686052, 14307486639.202265, 14443748416.718477, 14580010194.23469, 14716271971.750902, 14852533749.267115, 14988795526.783327, 15125057304.29954, 15261319081.815752, 15397580859.331964, 15533842636.848177, 15670104414.36439, 15806366191.880602, 15942627969.396814, 16078889746.913027, 16215151524.42924, 16351413301.945452, 16487675079.461664, 16623936856.977877, 16760198634.49409, 16896460412.010302, 17032722189.526514, 17168983967.042727, 17305245744.558937, 17441507522.07515, 17577769299.591362, 17714031077.107574, 17850292854.623787, 17986554632.14, 18122816409.65621, 18259078187.172424, 18395339964.688637, 18531601742.20485, 18667863519.72106, 18804125297.237274, 18940387074.753487, 19076648852.2697, 19212910629.78591, 19349172407.302124, 19485434184.818336, 19621695962.33455, 19757957739.85076, 19894219517.366974, 20030481294.883186, 20166743072.3994, 20303004849.91561, 20439266627.431824, 20575528404.948036, 20711790182.46425, 20848051959.98046, 20984313737.496674, 21120575515.012886, 21256837292.5291, 21393099070.04531, 21529360847.561523, 21665622625.077736, 21801884402.59395, 21938146180.11016, 22074407957.626373, 22210669735.142586, 22346931512.6588, 22483193290.17501, 22619455067.691223, 22755716845.207436, 22891978622.723648, 23028240400.23986, 23164502177.756073, 23300763955.272285, 23437025732.788498, 23573287510.30471, 23709549287.820923, 23845811065.337135, 23982072842.853348, 24118334620.36956, 24254596397.885773, 24390858175.401985, 24527119952.918198, 24663381730.43441, 24799643507.950623, 24935905285.466835, 25072167062.983047, 25208428840.49926, 25344690618.015472, 25480952395.531685, 25617214173.047897, 25753475950.56411, 25889737728.080322, 26025999505.596535, 26162261283.112747, 26298523060.62896, 26434784838.145172, 26571046615.661385, 26707308393.177597, 26843570170.69381, 26979831948.210022, 27116093725.726234, 27252355503.242447, 27388617280.75866, 27524879058.27487, 27661140835.791084, 27797402613.307297, 27933664390.82351, 28069926168.33972, 28206187945.855934, 28342449723.372147, 28478711500.88836, 28614973278.40457, 28751235055.920784, 28887496833.436996, 29023758610.95321, 29160020388.46942, 29296282165.985634, 29432543943.501846, 29568805721.01806, 29705067498.53427, 29841329276.050484, 29977591053.566696, 30113852831.08291, 30250114608.59912, 30386376386.115334, 30522638163.631546, 30658899941.14776, 30795161718.66397, 30931423496.180183, 31067685273.696396, 31203947051.21261, 31340208828.72882, 31476470606.245033, 31612732383.761246, 31748994161.27746, 31885255938.79367, 32021517716.309883, 32157779493.826096, 32294041271.342308, 32430303048.85852, 32566564826.374733, 32702826603.890945, 32839088381.407158, 32975350158.92337, 33111611936.439583, 33247873713.955795, 33384135491.472008, 33520397268.98822, 33656659046.504433, 33792920824.020645, 33929182601.536858, 34065444379.05307, 34201706156.569283, 34337967934.085495, 34474229711.60171, 34610491489.11792, 34746753266.63413, 34883015044.150345, 35019276821.66656, 35155538599.18277, 35291800376.69898, 35428062154.215195, 35564323931.73141, 35700585709.24762, 35836847486.76383, 35973109264.280045, 36109371041.79626, 36245632819.31247, 36381894596.82868, 36518156374.344894, 36654418151.86111, 36790679929.37732, 36926941706.89353, 37063203484.409744, 37199465261.92596, 37335727039.44217, 37471988816.95838, 37608250594.474594, 37744512371.99081, 37880774149.50702, 38017035927.02323, 38153297704.539444, 38289559482.05566, 38425821259.57187, 38562083037.08808, 38698344814.604294, 38834606592.12051, 38970868369.63672, 39107130147.15293, 39243391924.66914, 39379653702.185356, 39515915479.70157, 39652177257.21778, 39788439034.73399, 39924700812.250206, 40060962589.76642, 40197224367.28263, 40333486144.79884, 40469747922.315056, 40606009699.83127, 40742271477.34748, 40878533254.86369, 41014795032.379906, 41151056809.89612, 41287318587.41233, 41423580364.92854, 41559842142.444756, 41696103919.96097, 41832365697.47718]

cooleng = 33159802077.268185
receng = 9950639189.950212
totaleng = (cooleng - receng)/3600000

totprice = 0.2847 * totaleng

#plt.plot(ctlist, englist, label = "External Energy")
#plt.plot(ctlist, coolerenglist, label = "Cooler Energy")

#plt.title("Cooling Energy vs. Timestamp")
#plt.legend()
#plt.ylabel("Cooling Energy (J)")
#plt.xlabel("Timestamp (s)")

#plt.plot(plist, acclist1)
#plt.title("Mean Acceleration vs. Power")
#plt.ylabel("Mean Acceleration (m/s^2)")
#plt.xlabel("Power (W)")

plt.show()

print(totaleng)
print(totprice)