import pygame
import numpy
import math
import time

import matplotlib.pyplot as plt

pygame.init()

WIDTH, HEIGHT = 800, 800
WIN = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Orbit simulation")

WHITE = (255, 255, 255)
BLACK = (0, 0 ,0)
YELLOW = (255, 255, 0)
GREEN = (0, 255, 0)
GREY = (192, 192, 192)
TEAL = (0, 128, 128)
CRIMSON = (220, 20, 60)
CYAN = (0, 255, 255)
ORANGE = (255, 140, 0)


NOM = 196 # number of coils * 3
timestamp = 0
en_tot = 0
acclist2 = []
alist = []

def distance(p1, p2):
    x1, y1 = p1
    x2, y2 = p2

    d= math.sqrt((x1 - x2)**2  + (y1 - y2)**2)
    return d
class dip:
    PERM = 1.25663706e-6
    def __init__(self, divol, difil):
        self.divol = divol
        self.difil = difil

        self.dimom =  (self.difil * self.divol)/self.PERM
    def f2d(self, other, dist):
        d1 = self.dimom
        d2 = other.dimom

        f = (self.PERM * 6 * d1 * d2) / (4 * math.pi *(dist**4))
        return f
class payload:
    global NOM
    RMIC = 14.2
    H = 0.06469285
    R = H * math.cos(2 * math.pi/NOM) / (1 - math.cos(2 * math.pi/NOM)) + 0.001
    SCALE = 350/((RMIC + R))
    TIMESTEP = 0.001
    def __init__(self, x, y, radius, mass, omega, color):
        self.x = x
        self.y = y
        self.omega = omega
        self.linvel = 0
        self.prevvel = 0
        self.acc = 0
        self.alpha = 0
        self.pseudoalpha = 0
        self.radius = radius
        self.mass = mass
        self.color = color

        self.trajectory = []
        
        self.divol = 0.4 * 0.4 * 0.4
        self.difiel = 1.47

        self.dimom = (self.difiel * self.divol)/(1.25663706e-6)


    def toScale(self, point):
        x, y = point
        xn = x*self.SCALE + HEIGHT/2
        yn = -y*self.SCALE + WIDTH/2

        return xn, yn
    def draw(self, win):
        x_sc, y_sc = self.toScale(((self.R +self.H)*math.cos(self.pseudoalpha), (self.R +self.H)*math.sin(self.pseudoalpha)))

        #if len(self.trajectory) > 2:
            #updated_points = []
            #for pt in self.trajectory:
                #x0, y0 = self.toScale(pt)
                #updated_points.append((x0, y0))
            #pygame.draw.lines(win, BLACK, False, updated_points)

        pygame.draw.circle(win, self.color, (x_sc, y_sc), self.radius)


    def update_position(self, magnet1, magnet2):
        global timestamp, en_tot, acclist2, alist

        d1 = distance((self.x, self.y), (magnet1.x, magnet1.y))
        d2 = distance((self.x, self.y), (magnet2.x, magnet2.y))
        #print("dist: " , d1, "dist2: ", d2 )
        #print("m1: ", distance((0, 0), (self.x, self.y)) )
        #print(self.alpha)
        if d1 != 0: beta = math.asin((distance((0, 0), (self.x, self.y))) * math.sin(self.alpha) / d1)
        elif d1 == 0: beta = math.pi/2

        if d2 != 0:beta2 = math.asin((distance((0, 0), (self.x, self.y))) * math.sin(magnet2.alpha-self.alpha) / d2)
        elif d2 == 0: beta2 = math.pi/2
        #print("beta " , beta, " beta2: ", beta2)

        if beta > 0:
            force_front= magnet1.magforce(self, d1 + magnet1.len/2)
            force_back = magnet2.magforce(self, d2 + magnet2.len/2)

            theta = beta - self.alpha
            psi = beta2 - (magnet2.alpha - self.alpha)
            
            force_x1 = force_front * math.sin(theta)
            force_x2 = force_back * math.sin(psi)

            force_y1 = force_front * math.cos(theta)
            force_y2 = force_back * math.cos(psi)

            force_c = self.mass * self.omega * self.omega * (self.R + self.H)

            force_y = force_c + force_y2 - force_y1 
            #print(force_c, force_y1, force_y2)
            force_x = 3 * (force_x1 + force_x2)
            self.prevvel = self.linvel
            self.omega = self.omega + (force_x * self.TIMESTEP)/(self.mass * (self.R + self.H))
            self.linvel = self.omega * (self.R + self.H)

            self.acc = force_x / self.mass
            acclist2.append(self.acc)
            alist.append(self.alpha)

            #print("omega: ", self.omega, " ")
            self.alpha = self.alpha - self.omega * self.TIMESTEP
            self.pseudoalpha = (self.pseudoalpha - self.omega * self.TIMESTEP)%(2 * math.pi)
            self.x = (self.R  + self.H)*(math.cos(self.alpha))
            self.y = (self.R  + self.H)*math.sin(self.alpha)

            #en_mag1 = magnet1.amps * (magnet1.resistance**2) * self.TIMESTEP
            #en_mag2 = magnet2.amps * (magnet2.resistance**2) * self.TIMESTEP

            #en_rn = 3 * (en_mag1 + en_mag2) / 3600000000
            #en_tot = en_tot + en_rn
            timestamp = timestamp + self.TIMESTEP
            self.trajectory.append((self.x, self.y))
    def current(self, magnet):
        resistance = magnet.rpl * self.R * 2 * math.pi



class solenoid:
    global NOM
    PERM = 1.25663706e-6
    def __init__(self, amps, turns, len, radius, x, y):
        self.amps = amps
        self.turns = turns
        self.len = len
        self.radius = radius

        self.rpl = 0.12276 #mo/m
        self.wlen = self.radius * 2 * math.pi * self.turns
        self.wradius = self.len/(2 * self.turns)

        self.resistance = self.rpl * self.wlen

        self.x = x
        self.y = y
        self.alpha = 2 * math.pi / NOM

        self.n = self.turns/self.len
        self.constt = self.amps * self.n * self.PERM / 2
    def draw(self, win):
        global NOM
        alpha = math.acos(payload.R/(payload.R + payload.H))

        for i in range(0, NOM):
            x, y = payload.toScale(payload, (payload.R * math.cos(i * alpha), payload.R * math.sin(i * alpha)))
            pygame.draw.rect(win, ORANGE, (x-2.5, y-2.5, 5, 5))
    def magfield(self, x):
        a = (self.len/2 - x)/(math.sqrt((x - self.len/2)**2 + self.radius**2))
        b = (self.len/2 + x)/(math.sqrt((x + self.len/2)**2 + self.radius**2))

        mf_x = self.constt * (a + b)

        return mf_x

    def magforce(self, dipole, x):
        dm = dipole.dimom
        a = self.constt * dm * (self.radius**2)

        b = 1/(math.sqrt(((x - self.len/2)**2 + self.radius**2)**3))
        c = 1/(math.sqrt(((x + self.len/2)**2 + self.radius**2)**3))

        forc = a * (b + c)

        return forc
incr = 0
dvlist = []
tlist = []
ilist = []
acclist = []

def main():
    run = True
    clock = pygame.time.Clock()
    
    global NOM, incr, timestamp
    timestamp = 0
    current_i = 1000 + incr
    #mag1 = dip(0.4 * 0.4 * 0.4, 1.47)
    #mag2 = dip(0.4 * 0.4 * 0.4, 1.47)

    #F = (mag1.f2d(mag2, payload.H))
    #rads = 6000 * 2000 * 2000 / F
    #print (rads)
    box = payload((payload.R + payload.H), 0, 5, 6000, 0, CRIMSON)
    coil = solenoid(current_i, 2500, 0.5, 0.5, payload.R, 0)
    coil2 = solenoid(current_i, 2500, 0.5, 0.5, payload.R * math.cos(2 * math.pi / NOM), payload.R * math.sin(2 * math.pi / NOM))
    print(box.R)
    #print(coil.magforce(box, coil.len/2 + 0.1))

    #neom = 2 * math.pi/(math.acos(rads/(rads + box.H)))
    #print(neom)

    while run:
        clock.tick(60)
        WIN.fill(WHITE)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
        box.update_position(coil, coil2)
        if box.alpha <= 0:
            print(alist)
            print(acclist2)
            print(timestamp, " " , box.omega, "linvel: ", box.linvel)
            tlist.append(timestamp)
            acclist.append(box.acc)
            dvlist.append(box.linvel)
            box.alpha = math.acos(box.R/(box.R + box.H))
            box.x = (box.R + box.H) * math.cos(box.alpha)
            box.y = (box.R + box.H) * math.sin(box.alpha)
            if box.linvel >= 2000:
                run = False
                #ilist.append(current_i)
                #incr = incr + 20
                #print(acclist)
                #print(ilist)
                #if current_i >= 1500:
                    #run = False
                #else:
                    #main()
        pygame.draw.circle(WIN, BLACK, (WIDTH/2, HEIGHT/2), ((box.R + box.RMIC) * box.SCALE), 3)
        pygame.draw.circle(WIN, GREY, (WIDTH/2, HEIGHT/2), ((box.R) * box.SCALE), 3)
        box.draw(WIN)
        coil.draw(WIN)
        pygame.display.update()
    print("resisst: ", coil.resistance)
    pygame.quit()   
        
main()

acclist1 = [32.2481189839015, 32.89350878728641, 33.540137030499146, 34.18366032164061, 34.82829647858317, 35.47614343352399, 36.11799142243961, 36.76588943093503, 37.41149200250363, 38.05295480929604, 38.69770605941408, 39.34411242514489, 39.988802778511506, 40.63273235239119, 41.2808545280004, 41.92856295429003, 42.56870359222824, 43.216828387468034, 43.859697093339285, 44.5045600763556, 45.14986618627606, 45.79221747288718, 46.4420848302064, 47.08234359295479, 47.71997967619912, 48.3772660734024]
ilist1 = [1000, 1020, 1040, 1060, 1080, 1100, 1120, 1140, 1160, 1180, 1200, 1220, 1240, 1260, 1280, 1300, 1320, 1340, 1360, 1380, 1400, 1420, 1440, 1460, 1480, 1500]
alist = [0.03205694058670154, 0.03205693407465357, 0.03205692102057917, 0.032056901364383425, 0.0320568750155783, 0.0320568418528661, 0.03205680172358106, 0.03205675444298656, 0.0320566997934247, 0.03205663752331433, 0.03205656734599291, 0.03205648893839691, 0.032056401939574625, 0.03205630594902463, 0.03205620052485217, 0.032056085181735035, 0.0320559593886896, 0.0320558225666267, 0.03205567408568613, 0.032055513262337555, 0.03205533935623447, 0.032055151566806786, 0.03205494902957639, 0.03205473081217877, 0.032054495910072506, 0.03205424324191687, 0.03205397164459647, 0.032053679867870076, 0.03205336656861924, 0.032053030304670355, 0.03205266952816203, 0.03205228257842753, 0.03205186767435994, 0.0320514229062253, 0.03205094622688668, 0.03205043544239953, 0.032049888201935835, 0.032049301986991865, 0.03204867409983112, 0.03204800165111101, 0.03204728154663831, 0.03204651047319495, 0.03204568488337203, 0.032044800979346005, 0.03204385469552706, 0.032042841680005624, 0.03204175727471855, 
0.03204059649425248, 0.03203935400319738, 0.032038024091959105, 0.03203660065093568, 0.032035077142958016, 0.03203344657389239, 0.0320317014612987, 0.03202983380103643, 0.03202783503170872, 0.03202569599683486, 0.03202340690464313, 0.03202095728537941, 0.0320183359460334, 0.032015530922393905, 0.032012529428358354, 0.03200931780244078, 0.03200588145144753, 0.03200220479132282, 0.03199827118520836, 0.03199406287881417, 0.03198956093326391, 0.031984745155659425, 0.03197959402770891, 0.031974084632882836, 0.031968192582705376, 0.03196189194295852, 0.03195515516077385, 0.03194795299381468, 0.031940254443009755, 0.03193202669058726, 0.03192323504547111, 0.031913842898433395, 0.03190381168973574, 0.03189310089232116, 0.03188166801391424, 0.031869468621619705, 0.03185645639274185, 0.031842583195535124, 0.031827799203394146, 0.03181205304555216, 0.03179529199664113, 0.0317774622064493, 0.03175850896989083, 0.031738377035607133, 0.03171701094982038, 0.031694355430164675, 0.03167035576237639, 0.031644958211101026, 0.03161811043484325, 0.0315897618944005, 0.03155986424408382, 0.03152837169567772, 0.03149524134638194, 0.03146043346379431, 0.03142391172315893, 0.031385643394409746, 0.03134559947877832, 0.03130375479672479, 0.031260088030562856, 0.031214581726308685, 0.03116722225997749, 0.031117999773812247, 0.03106690808782666, 0.03101394459166486, 0.030959110121215782, 0.030902408823755338, 0.03084384801469738, 0.030783438028370143, 0.030721192064638088, 0.030657126032682974, 0.030591258392853805, 0.0305236099971936, 0.030454203929045437, 0.03038306534201967, 0.030310221298554683, 0.03023570060830992, 0.03015953366667678, 0.030081752293766143, 0.030002389574317546, 0.029921479699062992, 0.029839057808159087, 0.02975515983736695, 0.029669822367705358, 0.02958308247932555, 0.02949497761035473, 0.029405545421429872, 0.029314823666595755, 0.029222850071173662, 0.02912966221712373, 0.02903529743632821, 0.028939792712119286, 0.028843184589267323, 0.02874550909253799, 0.028646801653822114, 0.028547097047744226, 0.02844642933556607, 0.02834483181712216, 0.028242336990456363, 0.028138976518772573, 0.028034781204268253, 0.02792978096838732, 0.027824004838007184, 0.02771748093706338, 0.027610236483112685, 0.027502297788340978, 0.02739369026453401, 0.027284438431546595, 0.027174565928827325, 0.02706409552958084, 0.026953049157176584, 0.026841447903441677, 0.02672931204850455, 0.026616661081885266, 0.026503513724557223, 0.0263898879517328, 0.0262758010161523, 0.026161269471680793, 0.026046309197041307, 0.025930935419534864, 0.025815162738618228, 0.025699005149228977, 0.02558247606476441, 0.0254655883396362, 0.025348354291336455, 0.025230785721963175, 0.02511289393916392, 0.024994689776466267, 0.024876183612971916, 0.024757385392398776, 0.024638304641461644, 0.024518950487587576, 0.02439933167596675, 0.024279456585943514, 0.024159333246755642, 0.024038969352632573, 0.0239183722772656, 0.023797549087664828, 0.023676506557419114, 0.02355525117937625, 0.023433789177761507, 0.023312126519753167, 0.023190268926533978, 0.02306822188383767, 0.022945990652009644, 0.022823580275600816, 0.022700995592513346, 0.022578241242716703, 0.022455321676552096, 0.022332241162642836, 0.022209003795427736, 0.02208561350233411, 0.021962074050606368, 0.021838389053805692, 0.021714561977995605, 0.021590596147627764, 0.02146649475114166, 0.021342260846291344, 0.021217897365211794, 0.02109340711923682, 0.020968792803480053, 0.02084405700118988, 0.02071920218788874, 0.020594230735306654, 0.02046914491511844, 0.020343946902493474, 0.020218638779466527, 0.020093222538137716, 0.019967700083709163, 0.019842073237365594, 0.01971634373900572, 0.01959051324983081, 0.019464583354796623, 0.01933855556493437, 0.019212431319546218, 0.01908621198828038, 0.01895989887309066, 0.018833493210084932, 0.018706996171266817, 0.018580408866174545, 0.018453732343420726, 0.018326967592136485, 0.018200115543323233, 0.018073177071115092, 0.01794615299395475, 0.017819044075685322, 0.01769185102656067, 0.017564574504176256, 0.017437215114322616, 0.017309773411763197, 0.0171822499009382, 0.01705464503659587, 0.01692695922435249, 0.0167991928211822, 0.016671346135837508, 0.016543419429201317, 0.016415412914571006, 0.01628732675787502, 0.016159161077822205, 0.016030915945983985, 0.015902591386809314, 0.015774187377572153, 0.01564570384825103, 0.01551714068134014, 0.015388497711591165, 0.015259774725684903, 0.015130971461831531, 0.015002087609298206, 0.014873122807862432, 0.014744076647189488, 0.014614948666131937, 0.014485738351949048, 0.014356445139443709, 0.014227068410014166, 0.01409760749061766, 0.013968061652642777, 0.01383843011068702, 0.013708712021235792, 0.013578906481238693, 0.013449012526578676, 0.013319029130429209, 0.013188955201494244, 0.013058789582125365, 0.012928531046310032, 0.01279817829752437, 0.012667729966443452, 0.01253718460850148, 0.012406540701293668, 0.01227579664181103, 0.0121449507434986, 0.012014001233126846, 0.011882946247465349, 0.011751783829746882, 0.011620511925909195, 0.011489128380600793, 0.011357630932935986, 0.011226017211983293, 0.011094284731970144, 0.010962430887185395, 0.010830452946559843, 0.010698348047903294, 0.010566113191775103, 0.010433745234963291, 0.010301240883545346, 0.010168596685501706, 0.010035809022850624, 0.009902874103270561, 0.009769787951173602, 0.00963654639819039, 0.009503145073023928, 0.009369579390626106, 0.009235844540647065, 0.009101935475103483, 0.008967846895207401, 0.008833573237292527, 0.008699108657769709, 0.008564447017037796, 0.008429581862269997, 0.008294506408989447, 0.00815921352134065, 0.008023695690956005, 0.007887945014308567, 0.007751953168433613, 0.007615711384892447, 0.007479210421842163, 0.007342440534064888, 0.007205391440799298, 0.007068052291206076, 0.0069304116272875475, 0.006792457344070138, 0.00665417664684671, 0.006515556005264689, 0.00637658110403534, 0.006237236790030359, 0.0060975070155245715, 0.005957374777338995, 0.005816822051637828, 0.0056758297241376425, 0.005534377515498891, 0.005392443901691211, 0.005250006029157866, 0.005107039624654659, 0.004963518899709535, 0.004819416449746686, 0.004674703148050456, 0.00452934803491895, 0.0043833182025859625, 0.004236578676786561, 0.004089092296223394, 0.003940819591678241, 0.003791718667132173, 0.0036417450860392222, 0.0034908517668814196, 0.0033389888933657258, 0.003186103846167066, 0.003032141165056551, 0.0028770425526891096, 0.0027207469344163876, 0.0025631905924756566, 0.0024043073981635968, 0.0022440291727766153, 0.002082286218317092, 0.0019190080742891612, 0.0017541245812105098, 0.001587567372217281, 0.0014192719861283363, 0.001249180928641403, 0.0010772482656845846, 0.0009034468473762263, 0.0007277803114385814, 0.0005503041263546415, 0.0003711636298427471, 0.0001906595763072305, 9.331246326627128e-06]
acclist2 = [0.8199680272187804, 0.8237427809205817, 0.8313096649174689, 0.8427035137540758, 0.8579767791377668, 0.8771997710105891, 0.9004609819045363, 0.9278674934948064, 0.9595454699161662, 0.9956407375905549, 1.036319456436359, 1.0817688840424828, 1.1321982370861956, 1.1878396534966533, 1.248949259935653, 1.3158083493768067, 1.3887246742025736, 1.4680338606170868, 1.5541009507524715, 1.6473220795237467, 1.7481262936454338, 1.8569775211168642, 1.9743766998046712, 2.1008640747446528, 2.2370216742283366, 2.383475975640188, 2.5409007726559665, 2.7100202562381974, 2.891612322739649, 3.086512123104832, 3.2956158681593384, 3.5198849057288997, 3.760350086234007, 4.018116434227867, 4.294368144138778, 4.590373919258181, 4.9074926736792825, 5.24717961745439, 5.610992745650319, 6.000599752144165, 6.417785388971145, 6.864459291543269, 7.342664289165739, 7.854585218763385, 8.402558257458578, 8.989080786479887, 9.616821794411692, 10.288632822079014, 11.007559443480668, 11.776853267500055, 12.599984432193825, 13.480654547583875, 14.422810022545622, 15.430655686217465, 16.508668583005317, 17.661611781652848, 18.89454799139052, 20.21285272015593, 21.622226639596505, 23.12870673626487, 24.738675726337203, 26.45886908891569, 28.2963789281623, 30.258653704296748, 32.353492674787226, 34.58903365836052, 36.97373247432252, 39.516332118619, 42.22581941965695, 45.111366577767804, 48.1822546456609, 51.44777567202683, 54.9171099382012, 58.5991745099447, 62.50243926030341, 66.63470667311982, 71.00285220152973, 75.61252284739133, 80.46779307209685, 85.57077927702565, 90.92121702177289, 96.51600895694861, 102.34875613419254, 108.40929079663186, 114.68323464582006, 121.15161240797198, 127.7905555192088, 134.57113393111774, 141.45935427784693, 148.41635884906316, 155.39885114790118, 162.35976002108896, 169.2491359924747, 176.01525209168489, 182.6058596657688, 188.96953057359912, 195.05700403385396, 200.8224518468862, 206.22458104667936, 211.2275078624245, 215.8013590653125, 219.92258295711616, 
223.57397850406412, 226.74447382373262, 229.42870177709187, 231.62642954947435, 233.34190093132656, 234.58314571554186, 235.36130201906565, 235.68998638314284, 235.58473497844116, 235.06252849802428, 234.14140422375127, 232.8401517180904, 231.17808367579372, 229.17487048699846, 226.85042570075439, 224.22482947419158, 221.3182778989836, 218.15104750537213, 214.74346600160547, 211.115882217928, 207.2886301410444, 203.28198374226073, 199.11610094663192, 194.81095651321792, 190.38626476977115, 185.86139405575776, 181.25527537594425, 176.58630816325424, 171.87226621508145, 167.130206828198, 162.37638594778483, 157.6261818018877, 152.89402905220498, 148.19336499278458, 143.5365888052191, 138.93503436285064, 134.3989565932833, 129.93753097795624, 125.55886540314897, 121.27002328670115, 117.07705669115715, 112.98504799525655, 108.99815862584572, 105.11968334367336, 101.35210861912874, 97.69717371768297, 94.1559332291068, 90.72881990975353, 87.41570685444198, 84.21596816632652, 81.12853744313318, 78.15196354171799, 75.2844632162049, 72.5239703457765, 69.86818157500753, 67.31459828194517, 64.86056486701617, 62.503303419885945, 60.23994487257669, 58.06755678663621, 55.98316795125949, 53.98378998937562, 52.06643618109813, 50.228137719973155, 48.46595761821629, 46.777002473748716, 45.15843230524505, 43.6074686523765, 42.121401127744534, 40.69759259514165, 39.33348313632041, 38.02659295571656, 36.774524359907474, 35.57496293620128, 34.42567804284047, 33.324522711976655, 32.269433055918014, 31.25842725723265, 30.289604214101544, 29.361141903892793, 28.47129552023563, 27.618395431889834, 26.800845005409403, 26.017118327935936, 25.265757861392068, 24.54537205483599, 23.85463293773251, 23.192273713362763, 22.55708636847461, 21.947919312546155, 21.36367505764426, 20.80330794777952, 20.265821944857493, 19.750268476762333, 19.255744351772467, 18.781389742355522, 18.326386240415356, 17.88995498523031, 17.47135486462691, 17.069880789348034, 16.684862040090206, 16.315660686288574, 15.961670075404005, 15.62231339121177, 15.297042279387135, 14.985335538531833, 14.686697874671859, 14.400658717178759, 14.126771094019396, 13.86461056421558, 13.613774205392204, 13.373879654307883, 13.144564198291688, 12.925483915550156, 12.716312862360597, 12.516742305224028, 12.326479996116259, 12.145249489045376, 11.97278949619459, 11.808853282007776, 11.65320809364874, 11.505634626345671, 11.365926522209774, 11.233889901196044, 11.109342922952319, 10.992115378380982, 10.882048309814673, 10.778993658784149, 10.682813940431108, 10.593381943694498, 10.51058045647144, 10.434302015027427, 10.364448677002034, 10.300931817427797, 10.243671947250904, 10.192598553912303, 10.147649963618429, 10.108773225000455, 10.075924013932108, 10.049066559345356, 10.028173589956998, 10.01322630188923, 10.00421434724285, 10.00113584375615, 10.003997405759714, 10.012814196717562, 10.027610003726236, 10.048417334429727, 10.075277536895905, 10.108240943093826, 10.147367036708053, 10.192724646128392, 10.244392163562287, 10.302457791330536, 10.367019816528884, 10.438186915367526, 10.51607848863732, 10.600825029899923, 10.692568528155821, 10.791462906913756, 10.897674501766954, 11.01138257877689, 11.132779896176439, 11.262073312131848, 11.399484441548795, 11.54525036517377, 11.699624394530035, 11.862876896539538, 12.035296182020225, 12.217189462615908, 12.40888388111426, 12.610727620542225, 12.82309109789854, 13.046368248896469, 13.280977910645968, 13.527365309812124, 13.786003664446554, 14.057395908407125, 14.342076548064545, 14.640613661845865, 14.953611054093116, 15.281710575724574, 15.625594625285009, 15.985988845165908, 16.363665029075452, 16.75944425824953, 17.174200285424412, 17.608863187253448, 18.06442330764522, 18.541935516443242, 19.04252380996143, 19.567386282144923, 20.117800497542557, 20.695129299866366, 21.300827092667067, 21.93644663157388, 22.603646370621593, 23.304198408399262, 24.03999708307972, 24.81306826878575, 25.6255794291632, 26.479850487387168, 27.378365575021395, 28.323785725042157, 29.318962576751005, 30.36695316198714, 31.47103584271168, 32.63472746926365, 33.861801825874146, 35.15630942471425, 36.52259870100724, 37.9653386484918, 39.48954291544616, 41.10059535486551, 42.804276986086755, 44.60679427649857, 46.51480858757073, 
48.535466545067145, 50.676430983706794, 52.94591197514145, 55.35269726674067, 57.90618122729766, 60.61639110181867, 63.494009005826356, 66.55038762121737, 69.7975569678092, 73.24821888944413, 76.91572497717497, 80.8140325141365, 84.95763161832556, 89.36143502221739, 94.04061979110548, 99.01040765912373, 104.28576744526741, 109.88101906171171, 115.80931375206947, 122.08195911819013, 128.7075497726381, 135.69085436086294, 143.0313959609149, 150.7216431996491, 158.74469960816538, 167.07133089969162, 175.65608907956505, 184.4321499851912, 193.30422126781343, 202.13839026708766, 210.7468407478903, 218.8635050859797, 226.10293111958572, 231.88674451984107, 235.3053364896985, 234.84729073311354, 227.86294682521168, 209.5626697500997, 171.69301696015114, 103.78921248940121, 6.154131122661515]
#plt.plot(tlist, dvlist)
#plt.title("Delta-V vs. Timestamp")
#plt.xlabel("Timestamp (s)")
#plt.ylabel("Delta-V (m/s)")

#other ideas:
#plt.plot(enlist, dvlist)
#plt.title("Delta-V vs. Energy")
#plt.ylabel("Delta-V (m/s)")
#plt.xlabel("Energy (MWh)")

#plt.plot(tlist, acclist)
#plt.title("Acceleration vs. Timestamp")
#plt.xlabel("Timestamp (s)")
#plt.ylabel("Acceleration (m/s^2)")

plt.plot(alist, acclist2)
plt.title("Acceleration vs. Alpha")
plt.xlabel("Alpha (rad)")
plt.ylabel("Acceleration (m/s^2)")

plt.show()